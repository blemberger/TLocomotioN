import numpy as np
import matplotlib.pyplot as plt
import sys

# super-linear activation function
# 2 not 4 in segment (start with big loops)
# stronger I connections only more locally for a long chain: does it still work?
# gaussian or lorentzian decay for off diagonal (longer range) interactions: when does pattern fail? how does it fail?

# do other parameters effect period when act function is nonlinear??

if len(sys.argv) == 2:
    nameadd = sys.argv[1]
else:
    nameadd = ''

# nameadd = 'run2'  # manual override of nameadd variable

numsegments = 16
cyclenum = 8
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'brown', 'orange', 'pink'] # should be at least as large as cyclenum
initsize = 0.2
initvariance = 0.05
projscaling = 1.0
segscaling = 1.0

lam = 1.0
actfun_exponent = 0.9
distancewidth = 0.0000001
epsilon_seg = .45 # >0, <delta/(1+delta)
delta_seg = 1.6 # >0
theta_seg = 0.2 # >0

epsilon_proj = epsilon_seg
delta_proj = delta_seg
theta_proj = theta_seg # right now theta_proj does not appear in simulation at all

#totaltime = 360
totaltime = 300
plottime = 100

timestep = 0.01
noise = 0.0

homo_initcondits = False

netparams = [epsilon_seg, delta_seg, theta_seg]
projparams = [epsilon_proj, delta_proj, theta_proj]
segparams = [numsegments, cyclenum, initsize, initvariance, netparams]
timeparams = [timestep, totaltime, noise]


plotsteps = int(plottime/timestep)


def actfunc(input):
    input = max(0, input)
    input = np.power(input, actfun_exponent)
    return input


def distancefunc(separation, width):
    return np.exp( -((separation**2)*width) )


class Segment():
    def __init__(self, cyclenum, netparams):
        self.cyclenum = cyclenum
        self.netparams = netparams
        self.epsilon = netparams[0]
        self.delta = netparams[1]
        self.theta = netparams[2]

        self.rates = np.zeros([cyclenum])

    def nonneg(self):
        self.rates = [max(r, 0) for r in self.rates]

    def rand_initcondit(self, size, variance):
        self.rates = np.random.normal(loc=size, scale=variance, size=cyclenum)
        self.nonneg()

    def set_initcondit(self, initcondit):
        self.rates = initcondit


class Simulation():
    def __init__(self, segparams, projparams, timeparams, homo_initcondits=False):

        self.numsegments = segparams[0]
        self.cyclenum = segparams[1]
        self.init_size = segparams[2]
        self.init_variance = segparams[3]
        self.netparams = segparams[4]
        
        self.epsilon_seg = self.netparams[0]
        self.delta_seg = self.netparams[1]
        self.theta_seg = self.netparams[2]

        self.projparams = projparams
        self.epsilon_proj = self.projparams[0]
        self.delta_proj = self.projparams[1]
        self.theta_proj = self.projparams[2]
        
        self.projscaling = projscaling
        self.segscaling = segscaling

        self.nameadd = ''

        self.timestep =  timeparams[0]
        self.totaltime = timeparams[1]
        self.noise = timeparams[2]
        self.stepnum = int(self.totaltime/self.timestep)
        self.timeaxis = np.arange(0, self.totaltime, self.timestep)

        self.lam = 1.0
        self.distancewidth = 1.0

        self.ratehistories = np.zeros([self.numsegments, self.cyclenum, self.stepnum])

        self.homo_initcondits = homo_initcondits
        self.plotalpha = 0.8

        self.peaktimes = []

        self.segments = []
        for i in range(self.numsegments):
            self.segments.append(Segment(self.cyclenum, self.netparams))
            if i == 0: self.segments[0].rand_initcondit(self.init_size, self.init_variance)
            else:
                if self.homo_initcondits:
                    self.segments[i].set_initcondit(self.segments[0].rates)
                else:
                    self.segments[i].rand_initcondit(self.init_size, self.init_variance)

            self.ratehistories[i,:,0] = self.segments[-1].rates[:].copy()

        self.stepcount = 1

        
    def step(self):
        newrates_list = []
        for i in range(self.numsegments):
            newrates = self.segments[i].rates[:].copy()
            ratechange = np.zeros([self.cyclenum])
            for a in range(self.cyclenum):
                input = 0
                input += self.theta_seg
                #input += -segscaling*(1-self.epsilon_seg)*newrates[(a+1)%self.cyclenum]
                for b in range(0, self.cyclenum):
                    if a != b:
                        if (b+1)%self.cyclenum == a:
                            w = -(1-self.epsilon_seg)
                        else:
                            w = -(1+self.delta_seg)
                        input += self.segscaling*w*self.segments[i].rates[b]

                for j in range(0, self.numsegments):
                    if i != j:
                        distance1 = np.abs(i-j)
                        distance2 = np.abs(i-(j-self.numsegments))
                        distance3 = np.abs(j-(i-self.numsegments))
                        distance = min(distance1, distance2, distance3)
                        df = distancefunc(distance, self.distancewidth)
                        if (j+1)%self.numsegments == i:
                            w = -(1-self.epsilon_proj)
                        else:
                            w = -(1+self.delta_proj)
                        #input += projscaling*w*otherrates[a]
                        input += self.projscaling*w*df*self.segments[j].rates[a]

                #input = max(0, input)
                input = actfunc(input)
                ratechange[a] += -self.lam*newrates[a]
                ratechange[a] += input + (1-.5*np.random.rand())*self.noise
                ratechange[a] = ratechange[a]*self.timestep
            
            newrates = [max(0, newrates[a] + ratechange[a]) for a in range(self.cyclenum)]
            self.ratehistories[i, :, self.stepcount] = newrates[:]
            newrates_list.append(newrates)
        
        for i in range(self.numsegments):
            for a in range(self.cyclenum):
                self.segments[i].rates[a] = newrates_list[i][a]

        self.stepcount += 1


    def run(self):
        while self.stepcount*self.timestep < self.totaltime:
            self.step()


    def spacing_estimate(self):
        if self.peaktimes == []:
            print('no peaks found yet! cannot perform spacing_estimate')
        else:
            spacingavg, periodavg, avgcounter = 0, 0, 0
            for i in range(self.numsegments):
                avg, avgcount = 0, 0
                for a in range(self.cyclenum):
                    peaklist = self.peaktimes[i][a]
                    if len(peaklist) < 2:
                        print('peaklist too short! length', len(peaklist))
                    else:
                        avg += (peaklist[-1] - peaklist[0])/(len(peaklist)-1)
                        avgcount += 1
                if avgcount == 0:
                    print('no peak comparisons to make!')
                    #quit()
                else:
                    avgspacing = avg/(avgcount*self.cyclenum)
                    #print(f'segment {i+1} average spacing {round(avgspacing, 2)}')
                    spacingavg += avgspacing
                    #print(f'segment {i+1} period {round(avgspacing, 2)*self.cyclenum}')
                    periodavg += avgspacing*self.cyclenum
                    avgcounter += 1

            if avgcounter > 0:
                #print(f'segment average spacing {round(spacingavg/avgcounter, 2)}')
                #print(f'segment average period {round(periodavg/avgcounter, 2)}')

                print(f'average: segment spacing {round(spacingavg/avgcounter, 2)}, total period {round(periodavg/avgcounter, 2)}')   
                print(f'ratio {round(periodavg/spacingavg, 2)} (c.f. {self.numsegments}), avged over {avgcounter}')
                segspace = spacingavg
            
            spacingavg, periodavg, avgcounter = 0, 0, 0
            
            for a in range(self.cyclenum):
                avg, avgcount = 0, 0
                for i in range(0, self.numsegments-1):
                    for peakt in self.peaktimes[i][a]:
                        for peakt2 in self.peaktimes[i+1][a]:
                            if peakt2 > peakt:
                                avg += peakt2 - peakt
                                avgcount += 1
                                #print(peakt2, peakt)
                                break
                if avgcount > 0:
                    #print(f'type {a} average intersegment spacing {round(avg/avgcount, 2)}')
                    spacingavg += avg/avgcount
                    #print(f'type {a} period {round(avg/avgcount, 2)*self.numsegments}')
                    periodavg += (avg/avgcount)*self.numsegments
                    avgcounter += 1
                else: print(f'no average intersegment spacing')
            
            if avgcounter > 0:
                print(f'type average spacing {round(spacingavg/avgcounter, 2)}')
                print(f'type average period {round(periodavg/avgcounter, 2)}')

                print(f'average: type spacing {round(spacingavg/avgcounter, 2)}, total period {round(periodavg/avgcounter, 2)}')   
                print(f'ratio {round(periodavg/spacingavg, 2)} (c.f. {self.cyclenum}), avged over {avgcounter}')
                
                projspace = spacingavg
                print(f'{projspace/segspace} = {self.numsegments/self.cyclenum}?')


    def plot(self):

        fig, axs = plt.subplots( self.numsegments+1, 1, figsize=( 16, 1.2*(self.numsegments+1) ) )
        if self.peaktimes != []:
            print(f'peaktimes already initiated, rewriting over them')
            self.peaktimes = []
        
        for i in range(self.numsegments):
            self.peaktimes.append([])

            for a in range(self.cyclenum):
                self.peaktimes[i].append([])
                plotrates = self.ratehistories[i,a,:]
                color = colors[a]
                axs[i].plot(self.timeaxis[:plotsteps], plotrates[:plotsteps], color = color, alpha = self.plotalpha)
                axs[i].grid(True)

                if i == 0:
                    axs[-1].plot(self.timeaxis[:plotsteps], self.ratehistories[i,a,:plotsteps], color = colors[a], alpha = self.plotalpha)
                    axs[-1].grid(True)

                for t in range(int(self.stepnum/5), self.stepnum-1):

                    if self.ratehistories[i,a,t] > self.ratehistories[i,a,t-1]:
                        if self.ratehistories[i,a,t] > self.ratehistories[i,a,t+1]:

                            peaktime = t*self.timestep
                            height = self.ratehistories[i, a, t]*0.8
                            if t < plotsteps:
                                axs[i].vlines(x=peaktime, color='black', ymin=0, ymax=height, linewidth=1.5)
                            self.peaktimes[i][a].append(peaktime)


        fig.tight_layout()
        plt.savefig(f'proj_theta{str(theta_seg)}{self.nameadd}.png'.replace('.','p'))
        print('made the projection plot:' + self.nameadd)

        self.spacing_estimate()
        

        fig, axs = plt.subplots(self.cyclenum+1, 1, figsize=(16, 1.2*(self.cyclenum+1)))
        
        for a in range(self.cyclenum):
            for i in range(self.numsegments):
                axs[a].plot(self.timeaxis[:plotsteps], self.ratehistories[i, a, :plotsteps], color = colors[a],  alpha = self.plotalpha)
                axs[a].grid(True)

                if a == 0:
                    axs[-1].plot(self.timeaxis[:plotsteps], self.ratehistories[i,a,:plotsteps], color = colors[a], alpha = self.plotalpha)
                    axs[-1].grid(True)

                for t in range(int(self.stepnum/5), self.stepnum-1):

                    if self.ratehistories[i,a,t] > self.ratehistories[i,a,t-1]:
                        if self.ratehistories[i,a,t] > self.ratehistories[i,a,t+1]:

                            peaktime = t*self.timestep
                            height = self.ratehistories[i, a, t]*0.8
                            if t < plotsteps:
                                axs[a].vlines(x=peaktime, color='black', ymin=0, ymax=height, linewidth=1.5)
        

        fig.tight_layout()
        plt.savefig(f'seg_theta{str(theta_seg)}{self.nameadd}.png'.replace('.','p'))
        print('made the segment plot: ' + self.nameadd)

        


S = Simulation(segparams=segparams, projparams = projparams, timeparams=timeparams, homo_initcondits = homo_initcondits)
S.projscaling = projscaling
S.segscaling = segscaling
#S.nameadd = 'run2'
S.nameadd = nameadd

S.lam = lam
S.distancewidth = distancewidth


S.run()
S.plot()

Stran = Simulation(segparams=segparams, projparams = projparams, timeparams=timeparams, homo_initcondits = homo_initcondits)
Stran.projscaling = projscaling
Stran.segscaling = 0.0

Stran.nameadd = S.nameadd + 'transected'

Stran.lam = lam
Stran.distancewidth = distancewidth

Stran.run()
Stran.plot()

print(f'distance width {distancewidth}, maximum attenuation {distancefunc(numsegments, distancewidth)}')
print(f'theta (input): {theta_seg}')